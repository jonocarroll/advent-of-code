% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day04.R
\name{day04}
\alias{day04}
\alias{f04a}
\alias{f04b}
\alias{example_data_04}
\title{Day 04: Camp Cleanup}
\usage{
f04a(x)

f04b(x)

example_data_04(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
For Part One, \code{f04a(x)} returns .... For Part Two,
\code{f04b(x)} returns ....
}
\description{
\href{https://adventofcode.com/2022/day/4}{Camp Cleanup}
}
\details{
\strong{Part One}

Space needs to be cleared before the last supplies can be unloaded from
the ships, and so several Elves have been assigned the job of cleaning
up sections of the camp. Every section has a unique \emph{ID number}, and
each Elf is assigned a range of section IDs.

However, as some of the Elves compare their section assignments with
each other, they\'ve noticed that many of the assignments \emph{overlap}. To
try to quickly find overlaps and reduce duplicated effort, the Elves
pair up and make a \emph{big list of the section assignments for each pair}
(your puzzle input).

For example, consider the following list of section assignment pairs:

\if{html}{\out{<div class="sourceCode">}}\preformatted{2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
}\if{html}{\out{</div>}}

For the first few pairs, this list means:
\itemize{
\item Within the first pair of Elves, the first Elf was assigned sections
\code{2-4} (sections \code{2}, \code{3}, and \code{4}), while the second Elf was
assigned sections \code{6-8} (sections \code{6}, \code{7}, \code{8}).
\item The Elves in the second pair were each assigned two sections.
\item The Elves in the third pair were each assigned three sections: one
got sections \code{5}, \code{6}, and \code{7}, while the other also got \code{7}, plus
\code{8} and \code{9}.
}

This example list uses single-digit section IDs to make it easier to
draw; your actual list might contain larger numbers. Visually, these
pairs of section assignments look like this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{.234.....  2-4
.....678.  6-8

.23......  2-3
...45....  4-5

....567..  5-7
......789  7-9

.2345678.  2-8
..34567..  3-7

.....6...  6-6
...456...  4-6

.23456...  2-6
...45678.  4-8
}\if{html}{\out{</div>}}

Some of the pairs have noticed that one of their assignments \emph{fully
contains} the other. For example, \code{2-8} fully contains \code{3-7}, and \code{6-6}
is fully contained by \code{4-6}. In pairs where one assignment fully
contains the other, one Elf in the pair would be exclusively cleaning
sections their partner will already be cleaning, so these seem like the
most in need of reconsideration. In this example, there are \emph{\code{2}} such
pairs.

\emph{In how many assignment pairs does one range fully contain the other?}

\strong{Part Two}

\emph{(Use have to manually add this yourself.)}

\emph{(Try using \code{convert_clipboard_html_to_roxygen_md()})}
}
\examples{
f04a(example_data_04())
f04b()
}
