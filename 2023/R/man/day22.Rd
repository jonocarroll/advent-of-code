% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day22.R
\name{day22}
\alias{day22}
\alias{f22a}
\alias{f22b}
\alias{example_data_22}
\title{Day 22: Sand Slabs}
\usage{
f22a(x)

f22b(x)

example_data_22(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
For Part One, \code{f22a(x)} returns .... For Part Two,
\code{f22b(x)} returns ....
}
\description{
\href{https://adventofcode.com/2023/day/22}{Sand Slabs}
}
\details{
\strong{Part One}

Enough sand has fallen; it can finally filter water for Snow Island.

Well, \emph{almost}.

The sand has been falling as large compacted \emph{bricks} of sand, piling up
to form an impressive stack here near the edge of Island Island. In
order to make use of the sand to filter water, some of the bricks will
need to be broken apart - nay,
\emph{[disintegrated]{title="Disintegrate - X,R
Sorcery
Destroy X target bricks of sand. They cannot be regenerated. Create 32768 0/1 colorless Sand artifact creature tokens for each brick of sand destroyed in this way."}} -
back into freely flowing sand.

The stack is tall enough that you\'ll have to be careful about choosing
which bricks to disintegrate; if you disintegrate the wrong brick, large
portions of the stack could topple, which sounds pretty dangerous.

The Elves responsible for water filtering operations took a \emph{snapshot of
the bricks while they were still falling} (your puzzle input) which
should let you work out which bricks are safe to disintegrate. For
example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{1,0,1~1,2,1
0,0,2~2,0,2
0,2,3~2,2,3
0,0,4~0,2,4
2,0,5~2,2,5
0,1,6~2,1,6
1,1,8~1,1,9
}\if{html}{\out{</div>}}

Each line of text in the snapshot represents the position of a single
brick at the time the snapshot was taken. The position is given as two
\verb{x,y,z} coordinates - one for each end of the brick - separated by a
tilde (\code{~}). Each brick is made up of a single straight line of cubes,
and the Elves were even careful to choose a time for the snapshot that
had all of the free-falling bricks at \emph{integer positions above the
ground}, so the whole snapshot is aligned to a three-dimensional cube
grid.

A line like \verb{2,2,2~2,2,2} means that both ends of the brick are at the
same coordinate - in other words, that the brick is a single cube.

Lines like \verb{0,0,10~1,0,10} or \verb{0,0,10~0,1,10} both represent bricks that
are \emph{two cubes} in volume, both oriented horizontally. The first brick
extends in the \code{x} direction, while the second brick extends in the \code{y}
direction.

A line like \verb{0,0,1~0,0,10} represents a \emph{ten-cube brick} which is
oriented \emph{vertically}. One end of the brick is the cube located at
\verb{0,0,1}, while the other end of the brick is located directly above it
at \verb{0,0,10}.

The ground is at \code{z=0} and is perfectly flat; the lowest \code{z} value a
brick can have is therefore \code{1}. So, \verb{5,5,1~5,6,1} and \verb{0,2,1~0,2,5} are
both resting on the ground, but \verb{3,3,2~3,3,3} was above the ground at
the time of the snapshot.

Because the snapshot was taken while the bricks were still falling, some
bricks will \emph{still be in the air}; you\'ll need to start by figuring out
where they will end up. Bricks are magically stabilized, so they \emph{never
rotate}, even in weird situations like where a long horizontal brick is
only supported on one end. Two bricks cannot occupy the same position,
so a falling brick will come to rest upon the first other brick it
encounters.

Here is the same example again, this time with each brick given a letter
so it can be marked in diagrams:

\if{html}{\out{<div class="sourceCode">}}\preformatted{1,0,1~1,2,1   <- A
0,0,2~2,0,2   <- B
0,2,3~2,2,3   <- C
0,0,4~0,2,4   <- D
2,0,5~2,2,5   <- E
0,1,6~2,1,6   <- F
1,1,8~1,1,9   <- G
}\if{html}{\out{</div>}}

At the time of the snapshot, from the side so the \code{x} axis goes left to
right, these bricks are arranged like this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{ x
012
.G. 9
.G. 8
... 7
FFF 6
..E 5 z
D.. 4
CCC 3
BBB 2
.A. 1
--- 0
}\if{html}{\out{</div>}}

Rotating the perspective 90 degrees so the \code{y} axis now goes left to
right, the same bricks are arranged like this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{ y
012
.G. 9
.G. 8
... 7
.F. 6
EEE 5 z
DDD 4
..C 3
B.. 2
AAA 1
--- 0
}\if{html}{\out{</div>}}

Once all of the bricks fall downward as far as they can go, the stack
looks like this, where \verb{?} means bricks are hidden behind other bricks
at that location:

\if{html}{\out{<div class="sourceCode">}}\preformatted{ x
012
.G. 6
.G. 5
FFF 4
D.E 3 z
??? 2
.A. 1
--- 0
}\if{html}{\out{</div>}}

Again from the side:

\if{html}{\out{<div class="sourceCode">}}\preformatted{ y
012
.G. 6
.G. 5
.F. 4
??? 3 z
B.C 2
AAA 1
--- 0
}\if{html}{\out{</div>}}

Now that all of the bricks have settled, it becomes easier to tell which
bricks are supporting which other bricks:
\itemize{
\item Brick \code{A} is the only brick supporting bricks \code{B} and \code{C}.
\item Brick \code{B} is one of two bricks supporting brick \code{D} and brick \code{E}.
\item Brick \code{C} is the other brick supporting brick \code{D} and brick \code{E}.
\item Brick \code{D} supports brick \code{F}.
\item Brick \code{E} also supports brick \code{F}.
\item Brick \code{F} supports brick \code{G}.
\item Brick \code{G} isn\'t supporting any bricks.
}

Your first task is to figure out \emph{which bricks are safe to
disintegrate}. A brick can be safely disintegrated if, after removing
it, \emph{no other bricks} would fall further directly downward. Don\'t
actually disintegrate any bricks - just determine what would happen if,
for each brick, only that brick were disintegrated. Bricks can be
disintegrated even if they\'re completely surrounded by other bricks;
you can squeeze between bricks if you need to.

In this example, the bricks can be disintegrated as follows:
\itemize{
\item Brick \code{A} cannot be disintegrated safely; if it were disintegrated,
bricks \code{B} and \code{C} would both fall.
\item Brick \code{B} \emph{can} be disintegrated; the bricks above it (\code{D} and \code{E})
would still be supported by brick \code{C}.
\item Brick \code{C} \emph{can} be disintegrated; the bricks above it (\code{D} and \code{E})
would still be supported by brick \code{B}.
\item Brick \code{D} \emph{can} be disintegrated; the brick above it (\code{F}) would
still be supported by brick \code{E}.
\item Brick \code{E} \emph{can} be disintegrated; the brick above it (\code{F}) would
still be supported by brick \code{D}.
\item Brick \code{F} cannot be disintegrated; the brick above it (\code{G}) would
fall.
\item Brick \code{G} \emph{can} be disintegrated; it does not support any other
bricks.
}

So, in this example, \emph{\code{5}} bricks can be safely disintegrated.

Figure how the blocks will settle based on the snapshot. Once they\'ve
settled, consider disintegrating a single brick; \emph{how many bricks could
be safely chosen as the one to get disintegrated?}

\strong{Part Two}

Disintegrating bricks one at a time isn\'t going to be fast enough.
While it might sound dangerous, what you really need is a \emph{chain
reaction}.

You\'ll need to figure out the best brick to disintegrate. For each
brick, determine how many \emph{other bricks would fall} if that brick were
disintegrated.

Using the same example as above:
\itemize{
\item Disintegrating brick \code{A} would cause all \emph{\code{6}} other bricks to fall.
\item Disintegrating brick \code{F} would cause only \emph{\code{1}} other brick, \code{G}, to
fall.
}

Disintegrating any other brick would cause \emph{no other bricks} to fall.
So, in this example, the sum of \emph{the number of other bricks that would
fall} as a result of disintegrating each brick is \emph{\code{7}}.

For each brick, determine how many \emph{other bricks} would fall if that
brick were disintegrated. \emph{What is the sum of the number of other bricks
that would fall?}
}
\examples{
f22a(example_data_22())
f22b()
}
