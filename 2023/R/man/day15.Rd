% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day15.R
\name{day15}
\alias{day15}
\alias{f15a}
\alias{f15b}
\alias{example_data_15}
\title{Day 15: Lens Library}
\usage{
f15a(x)

f15b(x)

example_data_15(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
For Part One, \code{f15a(x)} returns .... For Part Two,
\code{f15b(x)} returns ....
}
\description{
\href{https://adventofcode.com/2023/day/15}{Lens Library}
}
\details{
\strong{Part One}

The newly-focused parabolic reflector dish is sending all of the
collected light to a point on the side of yet another mountain - the
largest mountain on Lava Island. As you approach the mountain, you find
that the light is being collected by the wall of a large facility
embedded in the mountainside.

You find a door under a large sign that says \"Lava Production
Facility\" and next to a smaller sign that says \"Danger - Personal
Protective Equipment required beyond this point\".

As you step inside, you are immediately greeted by a somewhat panicked
[reindeer]{title="do you like my hard hat"} wearing goggles and a
loose-fitting \href{https://en.wikipedia.org/wiki/Hard_hat}{hard hat}{target="_blank"}. The
reindeer leads you to a shelf of goggles and hard hats (you quickly find
some that fit) and then further into the facility. At one point, you
pass a button with a faint snout mark and the label \"PUSH FOR HELP\".
No wonder you were loaded into that \href{1}{trebuchet} so quickly!

You pass through a final set of doors surrounded with even more warning
signs and into what must be the room that collects all of the light from
outside. As you admire the large assortment of lenses available to
further focus the light, the reindeer brings you a book titled
\"Initialization Manual\".

\"Hello!\", the book cheerfully begins, apparently unaware of the
concerned reindeer reading over your shoulder. \"This procedure will let
you bring the Lava Production Facility online - all without burning or
melting anything unintended!\"

\"Before you begin, please be prepared to use the Holiday ASCII String
Helper algorithm (appendix 1A).\" You turn to appendix 1A. The reindeer
leans closer with interest.

The HASH algorithm is a way to turn any
\href{https://en.wikipedia.org/wiki/String_(computer_science)}{string}{target="_blank"}
of characters into a single \emph{number} in the range 0 to 255. To run the
HASH algorithm on a string, start with a \emph{current value} of \code{0}. Then,
for each character in the string starting from the beginning:
\itemize{
\item Determine the \href{https://en.wikipedia.org/wiki/ASCII#Printable_characters}{ASCII code}{target="_blank"}
for the current character of the string.
\item Increase the \emph{current value} by the ASCII code you just determined.
\item Set the \emph{current value} to itself multiplied by \code{17}.
\item Set the \emph{current value} to the
\href{https://en.wikipedia.org/wiki/Modulo}{remainder}{target="_blank"}
of dividing itself by \code{256}.
}

After following these steps for each character in the string in order,
the \emph{current value} is the output of the HASH algorithm.

So, to find the result of running the HASH algorithm on the string
\code{HASH}:
\itemize{
\item The \emph{current value} starts at \code{0}.
\item The first character is \code{H}; its ASCII code is \code{72}.
\item The \emph{current value} increases to \code{72}.
\item The \emph{current value} is multiplied by \code{17} to become \code{1224}.
\item The \emph{current value} becomes \emph{\code{200}} (the remainder of \code{1224} divided
by \code{256}).
\item The next character is \code{A}; its ASCII code is \code{65}.
\item The \emph{current value} increases to \code{265}.
\item The \emph{current value} is multiplied by \code{17} to become \code{4505}.
\item The \emph{current value} becomes \emph{\code{153}} (the remainder of \code{4505} divided
by \code{256}).
\item The next character is \code{S}; its ASCII code is \code{83}.
\item The \emph{current value} increases to \code{236}.
\item The \emph{current value} is multiplied by \code{17} to become \code{4012}.
\item The \emph{current value} becomes \emph{\code{172}} (the remainder of \code{4012} divided
by \code{256}).
\item The next character is \code{H}; its ASCII code is \code{72}.
\item The \emph{current value} increases to \code{244}.
\item The \emph{current value} is multiplied by \code{17} to become \code{4148}.
\item The \emph{current value} becomes \emph{\code{52}} (the remainder of \code{4148} divided
by \code{256}).
}

So, the result of running the HASH algorithm on the string \code{HASH} is
\emph{\code{52}}.

The \emph{initialization sequence} (your puzzle input) is a comma-separated
list of steps to start the Lava Production Facility. \emph{Ignore newline
characters} when parsing the initialization sequence. To verify that
your HASH algorithm is working, the book offers the sum of the result of
running the HASH algorithm on each step in the initialization sequence.

For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7
}\if{html}{\out{</div>}}

This initialization sequence specifies 11 individual steps; the result
of running the HASH algorithm on each of the steps is as follows:
\itemize{
\item \code{rn=1} becomes \emph{\code{30}}.
\item \verb{cm-} becomes \emph{\code{253}}.
\item \code{qp=3} becomes \emph{\code{97}}.
\item \code{cm=2} becomes \emph{\code{47}}.
\item \verb{qp-} becomes \emph{\code{14}}.
\item \code{pc=4} becomes \emph{\code{180}}.
\item \code{ot=9} becomes \emph{\code{9}}.
\item \code{ab=5} becomes \emph{\code{197}}.
\item \verb{pc-} becomes \emph{\code{48}}.
\item \code{pc=6} becomes \emph{\code{214}}.
\item \code{ot=7} becomes \emph{\code{231}}.
}

In this example, the sum of these results is \emph{\code{1320}}. Unfortunately,
the reindeer has stolen the page containing the expected verification
number and is currently running around the facility with it excitedly.

Run the HASH algorithm on each step in the initialization sequence.
\emph{What is the sum of the results?} (The initialization sequence is one
long line; be careful when copy-pasting it.)

\strong{Part Two}

You convince the reindeer to bring you the page; the page confirms that
your HASH algorithm is working.

The book goes on to describe a series of 256 \emph{boxes} numbered \code{0}
through \code{255}. The boxes are arranged in a line starting from the point
where light enters the facility. The boxes have holes that allow light
to pass from one box to the next all the way down the line.

\if{html}{\out{<div class="sourceCode">}}\preformatted{      +-----+  +-----+         +-----+
Light | Box |  | Box |   ...   | Box |
----------------------------------------->
      |  0  |  |  1  |   ...   | 255 |
      +-----+  +-----+         +-----+
}\if{html}{\out{</div>}}

Inside each box, there are several \emph{lens slots} that will keep a lens
correctly positioned to focus light passing through the box. The side of
each box has a panel that opens to allow you to insert or remove lenses
as necessary.

Along the wall running parallel to the boxes is a large library
containing lenses organized by \emph{focal length} ranging from \code{1} through
\code{9}. The reindeer also brings you a small handheld \href{https://en.wikipedia.org/wiki/Label_printer}{label printer}{target="_blank"}.

The book goes on to explain how to perform each step in the
initialization sequence, a process it calls the Holiday ASCII String
Helper Manual Arrangement Procedure, or \emph{HASHMAP} for short.

Each step begins with a sequence of letters that indicate the \emph{label} of
the lens on which the step operates. The result of running the HASH
algorithm on the label indicates the correct box for that step.

The label will be immediately followed by a character that indicates the
\emph{operation} to perform: either an equals sign (\code{=}) or a dash (\code{-}).

If the operation character is a \emph{dash} (\code{-}), go to the relevant box and
remove the lens with the given label if it is present in the box. Then,
move any remaining lenses as far forward in the box as they can go
without changing their order, filling any space made by removing the
indicated lens. (If no lens in that box has the given label, nothing
happens.)

If the operation character is an \emph{equals sign} (\code{=}), it will be
followed by a number indicating the \emph{focal length} of the lens that
needs to go into the relevant box; be sure to use the label maker to
mark the lens with the label given in the beginning of the step so you
can find it later. There are two possible situations:
\itemize{
\item If there is already a lens in the box with the same label, \emph{replace
the old lens} with the new lens: remove the old lens and put the new
lens in its place, not moving any other lenses in the box.
\item If there is \emph{not} already a lens in the box with the same label, add
the lens to the box immediately behind any lenses already in the
box. Don\'t move any of the other lenses when you do this. If there
aren\'t any lenses in the box, the new lens goes all the way to the
front of the box.
}

Here is the contents of every box after each step in the example
initialization sequence above:

\if{html}{\out{<div class="sourceCode">}}\preformatted{After "rn=1":
Box 0: [rn 1]

After "cm-":
Box 0: [rn 1]

After "qp=3":
Box 0: [rn 1]
Box 1: [qp 3]

After "cm=2":
Box 0: [rn 1] [cm 2]
Box 1: [qp 3]

After "qp-":
Box 0: [rn 1] [cm 2]

After "pc=4":
Box 0: [rn 1] [cm 2]
Box 3: [pc 4]

After "ot=9":
Box 0: [rn 1] [cm 2]
Box 3: [pc 4] [ot 9]

After "ab=5":
Box 0: [rn 1] [cm 2]
Box 3: [pc 4] [ot 9] [ab 5]

After "pc-":
Box 0: [rn 1] [cm 2]
Box 3: [ot 9] [ab 5]

After "pc=6":
Box 0: [rn 1] [cm 2]
Box 3: [ot 9] [ab 5] [pc 6]

After "ot=7":
Box 0: [rn 1] [cm 2]
Box 3: [ot 7] [ab 5] [pc 6]
}\if{html}{\out{</div>}}

All 256 boxes are always present; only the boxes that contain any lenses
are shown here. Within each box, lenses are listed from front to back;
each lens is shown as its label and focal length in square brackets.

To confirm that all of the lenses are installed correctly, add up the
\emph{focusing power} of all of the lenses. The focusing power of a single
lens is the result of multiplying together:
\itemize{
\item One plus the box number of the lens in question.
\item The slot number of the lens within the box: \code{1} for the first lens,
\code{2} for the second lens, and so on.
\item The focal length of the lens.
}

At the end of the above example, the focusing power of each lens is as
follows:
\itemize{
\item \code{rn}: \code{1} (box 0) \* \code{1} (first slot) \* \code{1} (focal length) = \emph{\code{1}}
\item \code{cm}: \code{1} (box 0) \* \code{2} (second slot) \* \code{2} (focal length) = \emph{\code{4}}
\item \code{ot}: \code{4} (box 3) \* \code{1} (first slot) \* \code{7} (focal length) = \emph{\code{28}}
\item \code{ab}: \code{4} (box 3) \* \code{2} (second slot) \* \code{5} (focal length) =
\emph{\code{40}}
\item \code{pc}: \code{4} (box 3) \* \code{3} (third slot) \* \code{6} (focal length) = \emph{\code{72}}
}

So, the above example ends up with a total focusing power of \emph{\code{145}}.

With the help of an over-enthusiastic reindeer in a hard hat, follow the
initialization sequence. \emph{What is the focusing power of the resulting
lens configuration?}
}
\examples{
f15a(example_data_15())
f15b()
}
